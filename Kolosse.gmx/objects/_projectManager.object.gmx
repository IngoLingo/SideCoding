<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///List of stored variables
pm_monny = 9000000; //max is 999999999. min is 0.

//pause deactivates objects
pm_paused = false;
//cutscene makes it so you can't control the player
pm_cutscene = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Game's Items
enum itemList {
    none,
    Item_1, Item_2, Item_3, Item_4, Item_5,
    total
}

enum medicineList{
    none,
    Small_Potion, Standerd_Potion, Big_Potion, Mega_Potion,
    Mini_Energy,
    Poison_Herb, Paralyze_Herb, Sleep_Herb, Confuse_Herb, Rage_Herb, Mega_Herb, Mega_Herb_Potion,
    total
}

enum captureList{
    none,
    Pe_Capture_Disk, Cu_Capture_Disk, Ag_Capture_Disk, Au_Capture_Disk, Pt_Capture_Disk, Red_Capture_Disk, Blue_Capture_Disk,
    total
}

enum keyList{
    none,
    Skeleton_Key, Key_1, Key_2, Key_3, Key_4, Key_5, Key_6, Key_7, Key_8, Key_9, Key_10, Key_11, Key_12, Key_13,
    total
}

enum itemStat {
    name,
    description,
    effect,
    /*damage,
    hpGain,
    catchRate,
    status,*/
    type,
    iid,
    price,
    total
}

/*enum itemType {
    none,
    battleItem,
    equipItem,
    hpGain,
    epGain,
    statusHeal,
    catch,
    itemKey,
    total
}*/

//Create a ds grid item.total wide, and item_stat.total tall
global.itemIndex = ds_grid_create(itemList.total, itemStat.total);
global.medicineIndex = ds_grid_create(medicineList.total, itemStat.total);
global.captureIndex = ds_grid_create(captureList.total, itemStat.total);
global.keyIndex = ds_grid_create(keyList.total, itemStat.total);
//Set every position to 0
ds_grid_clear(global.itemIndex, 0);
ds_grid_clear(global.medicineIndex, 0);
ds_grid_clear(global.captureIndex, 0);
ds_grid_clear(global.keyIndex, 0); 

scr_addItemsToGame_All();

//Invintory
global.itemInventory = ds_grid_create(3, 1);
global.medicineInventory = ds_grid_create(3, 1);
global.captureInventory = ds_grid_create(3, 1);
global.keyInventory = ds_grid_create(3, 1);
ds_grid_clear(global.itemInventory, 0);
ds_grid_clear(global.medicineInventory, 0);
ds_grid_clear(global.captureInventory, 0);
ds_grid_clear(global.keyInventory, 0);

//Store Invintory
global.itemStore = ds_grid_create(2, 1);
global.medicineStore = ds_grid_create(2, 1);
global.captureStore = ds_grid_create(2, 1);
ds_grid_clear(global.itemStore, 0);
ds_grid_clear(global.medicineStore, 0);
ds_grid_clear(global.captureStore, 0);

 
 //Test add items
/*scr_gain_item(itemList.Item_4, 1, global.itemInventory);
scr_gain_item(itemList.Item_2, 1, global.itemInventory);
scr_gain_item(itemList.Item_5, 1, global.itemInventory);
scr_gain_item(itemList.Item_3, 1, global.itemInventory);
scr_gain_item(itemList.Item_1, 1, global.itemInventory);
*/
scr_gain_item(medicineList.Small_Potion, 1, global.medicineInventory);
scr_gain_item(medicineList.Standerd_Potion, 1, global.medicineInventory);
scr_gain_item(medicineList.Big_Potion, 1, global.medicineInventory);
scr_gain_item(medicineList.Mega_Potion, 1, global.medicineInventory);
scr_gain_item(medicineList.Mini_Energy, 1, global.medicineInventory);
scr_gain_item(medicineList.Poison_Herb, 1, global.medicineInventory);
scr_gain_item(medicineList.Paralyze_Herb, 1, global.medicineInventory);
scr_gain_item(medicineList.Sleep_Herb, 1, global.medicineInventory);
scr_gain_item(medicineList.Confuse_Herb, 1, global.medicineInventory);
scr_gain_item(medicineList.Rage_Herb, 1, global.medicineInventory);
scr_gain_item(medicineList.Mega_Herb, 1, global.medicineInventory);
scr_gain_item(medicineList.Mega_Herb_Potion, 1, global.medicineInventory);

scr_gain_item(captureList.Pe_Capture_Disk, 999, global.captureInventory);
scr_gain_item(captureList.Cu_Capture_Disk, 1, global.captureInventory);
scr_gain_item(captureList.Ag_Capture_Disk, 1, global.captureInventory);
scr_gain_item(captureList.Au_Capture_Disk, 1, global.captureInventory);
scr_gain_item(captureList.Pt_Capture_Disk, 1, global.captureInventory);
scr_gain_item(captureList.Red_Capture_Disk, 1, global.captureInventory);
scr_gain_item(captureList.Blue_Capture_Disk, 1, global.captureInventory);

scr_gain_item(keyList.Key_12, 1, global.keyInventory);
scr_gain_item(keyList.Skeleton_Key, 1, global.keyInventory);
scr_gain_item(keyList.Key_11, 1, global.keyInventory);
scr_gain_item(keyList.Key_1, 1, global.keyInventory);
scr_gain_item(keyList.Key_13, 1, global.keyInventory);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Game's Kolosse
scr_kolosseDsGridCreate();

//This fills out the empty slots in the kolosseIndex grid
scr_addKolosseToGame_All();

//Saves what starter the player picked
global.playerStarter = 0;

//variables for party
maxParty = 5;
storedStats = 21; //0 to 20 = 21 (code is weird like that)

//crate the party slots for the player
global.playerParty = ds_grid_create(storedStats, maxParty);
ds_grid_clear(global.playerParty, 0); //Set every position to 0
//create the party slots for the enemy
global.enemyParty = ds_grid_create(storedStats, maxParty);
ds_grid_clear(global.enemyParty, 0); //Set every position to 0


scr_gainKolossePickUp(kolosse.peadot, 1);

scr_gainKolossePickUp(kolosse.grizling, 50);

scr_gainKolossePickUp(kolosse.tridon, 100);

//scr_gainKolossePickUp(kolosse.peadot, 100);

//scr_gainKolossePickUp(kolosse.grizling, 100);



/* STATS LIST FOR PARTY TO SAVE
0 = Index Number
1 = Nick Name //max character limet is 12, for the kolosse name
2 = Current Level
3 = Current EXP
4 = Current Damage
5 = Used Energy
6 to 11 = base stats  // hp, ep, attack, defence, speed, weight

12 = Attack stand
13 = Attack side
14 = Attack down
15 = Attack up
16 = Attack shot

17 = Status Effect or Fainted or Dead
18 = Gender
19 = Trust %
20 = Met at what location
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate par_pausable function
var activeBuffer;
activateBuffer = 128;

if pm_paused == true {
    instance_deactivate_object(par_pausable);
} else {
    instance_deactivate_object(par_pausable);
    instance_activate_region(view_xview[0] - activateBuffer, view_yview[0] - activateBuffer, view_wview[0] + (activateBuffer*2), view_hview[0] + (activateBuffer*2), true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
