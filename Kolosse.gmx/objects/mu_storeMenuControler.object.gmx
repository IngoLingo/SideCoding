<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables Set up
playerSlot = 1;

buttonDelay = 1;
delayNum = room_speed/6;

keyHoldTime = 0;
keyHoldLoop = 0;

buyTotal = 0;

tempGlobalIndex = global.itemIndex;
tempGlobalStore = global.itemStore;


enum store_st {
    none,
    main,
    buy, buy_buying, buy_sure,
    sell, sell_selling, sell_sure,
    talk
};
storeMenuState = store_st.main;

//Store Menu Selections
storeMenu[0] = "Buy";
storeMenu[1] = "Sell";
storeMenu[2] = "Talk";
storeMenu[3] = "Back";
storeM_selection = 0;

storeTabs[0] = "ITEMS";
storeTabs[1] = "MEDICINE";
storeTabs[2] = "CAPTURE";
tab_selection = 0;

yesNoCheck[0] = "Yes";
yesNoCheck[1] = "No";
checks_selection = 0;


bagItemsList = 0;
bagMedsList = 0;
bagCaptsList = 0;
bagKeysList = 0;
bagList_Selection = bagItemsList;

iteItemScroll = 0;
medItemScroll = 0;
capItemScroll = 0;
keyItemScroll = 0;

scrollNum = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Colors
//These are global vars (set up in the begining)
c_menuBlack = c_black;
c_menuGrayB2 = make_colour_hsv(0, 0, 43);
c_menuGrayB1 = make_colour_hsv(0, 0, 85);
c_menuGray0 = make_colour_hsv(0, 0, 128);
c_menuGrayW1 = make_colour_hsv(0, 0, 170);
c_menuGrayW2 = make_colour_hsv(0, 0, 213);//white?
c_menuWhite = c_white;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add items to store
scr_gainStore_item(itemList.Item_1, global.itemStore);
scr_gainStore_item(itemList.Item_2, global.itemStore);
scr_gainStore_item(itemList.Item_3, global.itemStore);
scr_gainStore_item(itemList.Item_4, global.itemStore);
scr_gainStore_item(itemList.Item_5, global.itemStore);

scr_gainStore_item(medicineList.Small_Potion, global.medicineStore);
scr_gainStore_item(medicineList.Standerd_Potion, global.medicineStore);
scr_gainStore_item(medicineList.Big_Potion, global.medicineStore);
scr_gainStore_item(medicineList.Mega_Potion, global.medicineStore);
scr_gainStore_item(medicineList.Mini_Energy, global.medicineStore);
scr_gainStore_item(medicineList.Poison_Herb, global.medicineStore);
scr_gainStore_item(medicineList.Paralyze_Herb, global.medicineStore);
scr_gainStore_item(medicineList.Sleep_Herb, global.medicineStore);
scr_gainStore_item(medicineList.Confuse_Herb, global.medicineStore);
scr_gainStore_item(medicineList.Rage_Herb, global.medicineStore);
scr_gainStore_item(medicineList.Mega_Herb, global.medicineStore);
scr_gainStore_item(medicineList.Mega_Herb_Potion, global.medicineStore);

scr_gainStore_item(captureList.Pe_Capture_Disk, global.captureStore);
scr_gainStore_item(captureList.Cu_Capture_Disk, global.captureStore);
scr_gainStore_item(captureList.Ag_Capture_Disk, global.captureStore);
scr_gainStore_item(captureList.Au_Capture_Disk, global.captureStore);
scr_gainStore_item(captureList.Pt_Capture_Disk, global.captureStore);
scr_gainStore_item(captureList.Red_Capture_Disk, global.captureStore);
scr_gainStore_item(captureList.Blue_Capture_Disk, global.captureStore);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Controles
scr_getControler1_Inputs();

var pressPauseButton;
pressPauseButton = max(key_press_start, key_press_Y, 0);

var pressSelectButton;
pressSelectButton = max(key_press_select, key_press_X, 0);

var moveV_Axis = 0;
moveV_Axis = (key_press_down - key_press_up);

var moveH_Axis = 0;
moveH_Axis = (key_press_right - key_press_left);

/* //key_press_A
var pressConfirm;
pressConfirm = max(key_press_A,0);

//key_press_B
var pressBack;
pressBack = max (key_press_B, 0);
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///buttonDelay--
if buttonDelay &gt; 0 {buttonDelay--;} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controles for the Shop Menu
///Controles for Party Menus
switch (storeMenuState) {
    case store_st.main:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        storeM_selection += moveH_Axis;
        storeM_selection += moveV_Axis*2;
        storeM_selection = wrap(storeM_selection, 0, array_length_1d(storeMenu) - 1);
          
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            switch (storeM_selection) {
                case 0: storeMenuState = store_st.buy;  break;
                case 1: storeMenuState = store_st.sell;  break;
                case 2: storeMenuState = store_st.talk; break;
                case 3: storeMenuState = store_st.none; break;
            }
            if storeM_selection &lt;= 1 {
                tab_selection = 0;
                bagItemsList = 0;
                bagMedsList = 0;
                bagCaptsList = 0;
                bagKeysList = 0;
                bagList_Selection = bagItemsList;
                iteItemScroll = 0;
                medItemScroll = 0;
                capItemScroll = 0;
                keyItemScroll = 0;
                scrollNum = 0;
            }
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            storeMenuState = store_st.none;
            buttonDelay = delayNum;
        }
        
        //Pressing Select Button (maybe hold up the store?)
        if (key_press_select == 1) {          
            storeMenuState = pause_st.none;
            buttonDelay = delayNum;
        }
        break;
    
    // Buying States
    case store_st.buy:
        if buttonDelay &gt; 0 {break;}
        
        //Holding the up or down button
        if (key_hold_down || key_hold_up) {
            if keyHoldTime &lt; room_speed/2 {
                keyHoldTime++;
            } else {
                if keyHoldLoop &lt; room_speed/16 {
                    keyHoldLoop++;
                } else {
                    moveV_Axis = (key_hold_down - key_hold_up);
                    keyHoldLoop = 0;
                }
            }
        } else { keyHoldTime = 0; keyHoldLoop = 0;}
        
        //Pressing on the directional controles
        //  Left/Right
        tab_selection += moveH_Axis;
        tab_selection = wrap(tab_selection,0,array_length_1d(storeTabs)-1);
        
        //Switch based on what bag tab is selected
        switch (tab_selection) {
            case 0:
                //Up/Down
                bagItemsList += moveV_Axis;
                bagItemsList = wrap(bagItemsList, 0, ds_grid_height(global.itemStore));
                bagList_Selection = bagItemsList;
                
                //Scroll items
                if (bagList_Selection-iteItemScroll) &gt; 7 {iteItemScroll++;}
                if (bagList_Selection-iteItemScroll) &lt; 0 {iteItemScroll--;}
                
                scrollNum = iteItemScroll;
                break;
            case 1:
                bagMedsList += moveV_Axis;
                bagMedsList = wrap(bagMedsList, 0, ds_grid_height(global.medicineStore));
                bagList_Selection = bagMedsList;
                
                //Scroll items
                if (bagList_Selection-medItemScroll) &gt; 7 {medItemScroll++;}
                if (bagList_Selection-medItemScroll) &lt; 0 {medItemScroll--;}
                
                scrollNum = medItemScroll;
                break;
            case 2:
                bagCaptsList += moveV_Axis;
                bagCaptsList = wrap(bagCaptsList, 0, ds_grid_height(global.captureStore));
                bagList_Selection = bagCaptsList;
                
                //Scroll items
                if (bagList_Selection-capItemScroll) &gt; 7 {capItemScroll++;}
                if (bagList_Selection-capItemScroll) &lt; 0 {capItemScroll--;}
                
                scrollNum = capItemScroll;
                break;
        }
        
        //Pressing Confirm Button
        if (key_press_A == 1) {
            if (bagItemsList &gt;= (ds_grid_height(global.itemStore)) &amp;&amp; tab_selection == 0) || 
               (bagMedsList &gt;= (ds_grid_height(global.medicineStore)) &amp;&amp; tab_selection == 1) || 
               (bagCaptsList &gt;= (ds_grid_height(global.captureStore)) &amp;&amp; tab_selection == 2){
                storeMenuState = store_st.main;
            } else {
                storeMenuState = store_st.buy_buying;
                buyTotal = 1;
            }
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            storeMenuState = store_st.main;
            buttonDelay = delayNum;
        }
        break;
        
    case store_st.buy_buying:
        if buttonDelay &gt; 0 {break;}
        buyTotal -= moveV_Axis;
        buyTotal += moveH_Axis*10;
        buyTotal = wrap(buyTotal, 0, 999);
        
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            storeMenuState = store_st.buy_sure;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            storeMenuState = store_st.buy;
            buttonDelay = delayNum;
        }
        break;
        
    case store_st.buy_sure:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing Confirm Button
        if (key_press_A == 1) {   
            if tab_selection == 0 { 
                scr_gain_item(global.itemIndex[# global.itemStore[# 0, bagItemsList], itemStat.iid], buyTotal, global.itemInventory);
                _projectManager.pm_monny -= global.itemIndex[# global.itemStore[# 0, bagItemsList], itemStat.price]*buyTotal;
            }
            if tab_selection == 1 {
                scr_gain_item(global.medicineIndex[# global.medicineStore[# 0, bagMedsList], itemStat.iid], buyTotal, global.medicineInventory);
                _projectManager.pm_monny -= global.medicineIndex[# global.medicineStore[# 0, bagMedsList], itemStat.price]*buyTotal;
            }
            if tab_selection == 2 {
                scr_gain_item(global.captureIndex[# global.captureStore[# 0, bagCaptsList], itemStat.iid], buyTotal, global.captureInventory);
                _projectManager.pm_monny -= global.captureIndex[# global.captureStore[# 0, bagCaptsList], itemStat.price]*buyTotal;
            }
            
               
            storeMenuState = store_st.buy;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            storeMenuState = store_st.buy_buying;
            buttonDelay = delayNum;
        }
        break;
        
    // Selling States
    case store_st.sell:
        if buttonDelay &gt; 0 {break;}
        
        //Holding the up or down button
        if (key_hold_down || key_hold_up) {
            if keyHoldTime &lt; room_speed/2 {
                keyHoldTime++;
            } else {
                if keyHoldLoop &lt; room_speed/16 {
                    keyHoldLoop++;
                } else {
                    moveV_Axis = (key_hold_down - key_hold_up);
                    keyHoldLoop = 0;
                }
            }
        } else { keyHoldTime = 0; keyHoldLoop = 0;}
        
        //Pressing on the directional controles
        //  Left/Right
        tab_selection += moveH_Axis;
        tab_selection = wrap(tab_selection,0,array_length_1d(storeTabs)-1);
        
        //Switch based on what bag tab is selected
        switch (tab_selection) {
            case 0:
                //Up/Down
                bagItemsList += moveV_Axis;
                bagItemsList = wrap(bagItemsList, 0, ds_grid_height(global.itemInventory));
                bagList_Selection = bagItemsList;
                
                //Scroll items
                if (bagList_Selection-iteItemScroll) &gt; 7 {iteItemScroll++;}
                if (bagList_Selection-iteItemScroll) &lt; 0 {iteItemScroll--;}
                
                scrollNum = iteItemScroll;
                break;
            case 1:
                bagMedsList += moveV_Axis;
                bagMedsList = wrap(bagMedsList, 0, ds_grid_height(global.medicineInventory));
                bagList_Selection = bagMedsList;
                
                //Scroll items
                if (bagList_Selection-medItemScroll) &gt; 7 {medItemScroll++;}
                if (bagList_Selection-medItemScroll) &lt; 0 {medItemScroll--;}
                
                scrollNum = medItemScroll;
                break;
            case 2:
                bagCaptsList += moveV_Axis;
                bagCaptsList = wrap(bagCaptsList, 0, ds_grid_height(global.captureInventory));
                bagList_Selection = bagCaptsList;
                
                //Scroll items
                if (bagList_Selection-capItemScroll) &gt; 7 {capItemScroll++;}
                if (bagList_Selection-capItemScroll) &lt; 0 {capItemScroll--;}
                
                scrollNum = capItemScroll;
                break;
        }
        
        //Pressing Confirm Button
        if (key_press_A == 1) {
            if (bagItemsList &gt;= (ds_grid_height(global.itemInventory)) &amp;&amp; tab_selection == 0) || 
               (bagMedsList &gt;= (ds_grid_height(global.medicineInventory)) &amp;&amp; tab_selection == 1) || 
               (bagCaptsList &gt;= (ds_grid_height(global.captureInventory)) &amp;&amp; tab_selection == 2){
                storeMenuState = store_st.main;
            } else {
                storeMenuState = store_st.sell_selling;
            }
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            storeMenuState = store_st.main;
            buttonDelay = delayNum;
        }
        break;
        
    case store_st.sell_selling:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            storeMenuState = store_st.sell_sure;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            storeMenuState = store_st.sell;
            buttonDelay = delayNum;
        }
        break;
        
    case store_st.sell_sure:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing Confirm Button
        if (key_press_A == 1) {     
            //scr_lose_item(,,);
            //add cost to money
                   
            storeMenuState = store_st.sell;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            storeMenuState = store_st.sell_selling;
            buttonDelay = delayNum;
        }
        break;
    
    // Talking
    case store_st.talk:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            storeMenuState = store_st.main;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            storeMenuState = store_st.main;
            buttonDelay = delayNum;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI for the None and Main Menus
//Draw the white background for the menus
if storeMenuState &gt;= store_st.main{
    if storeMenuState == store_st.main {draw_set_alpha(.25)} else {draw_set_alpha(1)}
    //DrawBackground
    draw_set_colour(c_menuWhite);
    draw_rectangle(0,0,display_get_gui_width(),display_get_gui_height(),false);
}

//Draw the consistent things for the buy and sell menus
if (storeMenuState &gt;= store_st.buy &amp;&amp; storeMenuState &lt;= store_st.sell_sure) {
        // Draw buy menus
        if (storeMenuState &gt;= store_st.buy &amp;&amp; storeMenuState &lt;= store_st.buy_sure) {
            //Draw store invintory
            scr_draw_ShopListAndSelection(tab_selection);
            
            scr_drawStoreBorderAndControles("", "", true, "Confirm", true, "Back", "BUY INVINTORY");
        } 
        // Draw sell menus
        else if (storeMenuState &gt;= store_st.sell &amp;&amp; storeMenuState &lt;= store_st.sell_sure) {
            //Draw player invintory
            scr_draw_InvintoryListAndSelection(tab_selection);
            
            scr_drawStoreBorderAndControles("", "", true, "Confirm", true, "Back", "SELL INVINTORY");
        }
             
        //draw selection for the item tabs
        draw_set_font(fnt_ArialBlack20);
        var m;
        for (m = 0; m &lt; 3; m += 1) {
            draw_sprite(
                spr_bagMenuTabs, 
                m, 
                display_get_gui_width()*0.55+(m*(sprite_get_width(spr_bagMenuTabs))), 
                40+24, 
            );
        }
        
        //draw bag tab
        draw_set_color(c_menuGray0);
        draw_rectangle(
            display_get_gui_width()*0.55+(tab_selection*(sprite_get_width(spr_bagMenuTabs))), 
            40+sprite_get_height(spr_bagMenuTabs)+24, 
            display_get_gui_width()*0.55+(sprite_get_width(spr_bagMenuTabs))+(tab_selection*(sprite_get_width(spr_bagMenuTabs))), 
            60+sprite_get_height(spr_bagMenuTabs)+24,
            false
        );
        
        //draw bag tab box
        draw_set_color(c_menuGrayW1);
        draw_rectangle(
            display_get_gui_width()*0.55, 
            50+sprite_get_height(spr_bagMenuTabs)+24, 
            display_get_gui_width(),//*0.95, 
            50+sprite_get_height(spr_bagMenuTabs)+(string_height("I"))+24,
            false
        );
        
        //draw bag tab menu text
        draw_set_color(c_menuWhite);
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        draw_text(
            display_get_gui_width()*0.75,
            50+sprite_get_height(spr_bagMenuTabs)+24,
            string(storeTabs[tab_selection])          
        );
        
        //draw the item name box
        draw_set_font(fnt_ArialBlack16);
        draw_set_color(c_menuGrayW1);
        draw_rectangle(
            0,
            sprite_get_height(spr_bagMenuMask)+56,  
            display_get_gui_width()*0.5, 
            sprite_get_height(spr_bagMenuMask)+80+(string_height("I")),
            false
        );
        
        //draw item name box text
        draw_set_color(c_menuBlack);
        draw_set_halign(fa_left);
        
        // Buy Menus
        if (storeMenuState &gt;= store_st.buy &amp;&amp; storeMenuState &lt;= store_st.buy_sure) {
            switch (tab_selection) {
                case 0: 
                    if bagItemsList &gt;= (ds_grid_height(global.itemStore)) {
                        draw_text(0, 0, " ");
                    } else {
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.itemIndex[# global.itemStore[# 0, bagItemsList], itemStat.name]));
                        draw_set_font(fnt_ArialBlack12);
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58+24, "You Own: " + string(scr_check_itemAmount(global.itemIndex[# global.itemStore[# 0, bagItemsList], itemStat.iid], global.itemInventory)));
                        draw_text(display_get_gui_width()*0.25, sprite_get_height(spr_bagMenuMask)+58+24, "Price: $" + string(global.itemIndex[# global.itemStore[# 0, bagItemsList], itemStat.price]));
                    }
                    break;
                case 1:
                    if bagMedsList &gt;= (ds_grid_height(global.medicineStore)) {
                        draw_text(0, 0, " ");
                    } else {
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.medicineIndex[# global.medicineStore[# 0, bagMedsList], itemStat.name]));
                        draw_set_font(fnt_ArialBlack12);
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58+24, "You Own: " + string(scr_check_itemAmount(global.medicineIndex[# global.medicineStore[# 0, bagMedsList], itemStat.iid], global.medicineInventory)));
                        draw_text(display_get_gui_width()*0.25, sprite_get_height(spr_bagMenuMask)+58+24, "Price: $" + string(global.medicineIndex[# global.medicineStore[# 0, bagMedsList], itemStat.price]));
                    }
                    break;
                case 2:
                    if bagCaptsList &gt;= (ds_grid_height(global.captureStore)) {
                        draw_text(0, 0, " ");
                    } else {
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.captureIndex[# global.captureStore[# 0, bagCaptsList], itemStat.name]));
                        draw_set_font(fnt_ArialBlack12);
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58+24, "You Own: " + string(scr_check_itemAmount(global.captureIndex[# global.captureStore[# 0, bagCaptsList], itemStat.iid], global.captureInventory)));
                        draw_text(display_get_gui_width()*0.25, sprite_get_height(spr_bagMenuMask)+58+24, "Price: $" + string(global.captureIndex[# global.captureStore[# 0, bagCaptsList], itemStat.price]));
                    }
                    break;
            }
        }
        // Sell Menus
        else if (storeMenuState &gt;= store_st.sell &amp;&amp; storeMenuState &lt;= store_st.sell_sure) {
            switch (tab_selection) {
                case 0: 
                    if bagItemsList &gt;= (ds_grid_height(global.itemInventory)) {
                        draw_text(0, 0, " ");
                    } else {
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.itemIndex[# global.itemInventory[# 0, bagItemsList], itemStat.name]));
                        draw_set_font(fnt_ArialBlack12);
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58+24, "You Own: " + string(global.itemInventory[# 1, bagItemsList]));
                        draw_text(display_get_gui_width()*0.25, sprite_get_height(spr_bagMenuMask)+58+24, "Price: $" + string(global.itemIndex[# global.itemInventory[# 0, bagItemsList], itemStat.price]/2));
                    }
                    break;
                case 1:
                    if bagMedsList &gt;= (ds_grid_height(global.medicineInventory)) {
                        draw_text(0, 0, " ");
                    } else {
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.medicineIndex[# global.medicineInventory[# 0, bagMedsList], itemStat.name]));
                        draw_set_font(fnt_ArialBlack12);
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58+24, "You Own: " + string(global.medicineInventory[# 1, bagMedsList]));
                        draw_text(display_get_gui_width()*0.25, sprite_get_height(spr_bagMenuMask)+58+24, "Price: $" + string(global.medicineIndex[# global.medicineInventory[# 0, bagMedsList], itemStat.price]/2));
                    }
                    break;
                case 2:
                    if bagCaptsList &gt;= (ds_grid_height(global.captureInventory)) {
                        draw_text(0, 0, " ");
                    } else {
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.captureIndex[# global.captureInventory[# 0, bagCaptsList], itemStat.name]));
                        draw_set_font(fnt_ArialBlack12);
                        draw_text(10, sprite_get_height(spr_bagMenuMask)+58+24, "You Own: " + string(global.captureInventory[# 1, bagCaptsList]));
                        draw_text(display_get_gui_width()*0.25, sprite_get_height(spr_bagMenuMask)+58+24, "Price: $" + string(global.captureIndex[# global.captureInventory[# 0, bagCaptsList], itemStat.price]/2));
                    }
                    break;
            }
        }
        
        //Draw Money
        draw_set_color(c_menuGrayB2);
        draw_set_font(fnt_ArialBlack16);
        draw_set_halign(fa_right);
        draw_set_valign(fa_top);
        draw_text(display_get_gui_width(),string_height("O")-8,"Your Money: $"+string(num_separator(_projectManager.pm_monny,",",3))+"  ");
}


switch (storeMenuState) 
{
    case store_st.none:
        break;
        
    case store_st.main:
        draw_set_alpha(1)
        //draw the options box
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fnt_ArialBlack16);
        draw_nineSliceRectangle(spr_nSlice,
            0,
            display_get_gui_height()*0.45-((string_height("I"))),  
            display_get_gui_width()*0.46, 
            display_get_gui_height()*0.45+((string_height("I"))*3)+20
        );
        
        draw_set_color(c_menuBlack);
        var m;
        for (m = 0; m &lt; array_length_1d(storeMenu); m += 1) 
        {                
            draw_text(
                display_get_gui_width()*0.09 + ((m%2)*(string_height(storeMenu[0])*4)), 
                display_get_gui_height()*0.45+10 + ((m div 2)*(string_height(storeMenu[0]))), 
                string(storeMenu[m])
            );
        } 
        
        draw_sprite(spr_optionsSelectionArrow, 0, 
            display_get_gui_width()*0.09 - (sprite_get_width(spr_optionsSelectionArrow)*0.6) + ((storeM_selection%2)*(string_height(storeMenu[0])*4)), 
            display_get_gui_height()*0.45+10 + (sprite_get_height(spr_optionsSelectionArrow)*0.5) + ((storeM_selection div 2)*(string_height(storeMenu[0]))), 
        );
        
        //Draw text box
        
        //Border
        scr_drawStoreBorderAndControles("D-Pad", "Move Selection", true, "Confirm", true, "Exit ", "STORE");
        
        draw_set_color(c_menuGrayB2);
        draw_set_font(fnt_ArialBlack16);
        draw_set_halign(fa_right);
        draw_set_valign(fa_top);
        draw_text(display_get_gui_width(),string_height("O")-8,"Your Money: $"+string(num_separator(_projectManager.pm_monny,",",3))+"  ");
        break;
        
    // Buying States
    case store_st.buy:
        //draw the item discription text
        draw_set_color(c_menuBlack);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fnt_ArialBlack12);
        draw_text(24, sprite_get_height(spr_bagMenuMask)+120, string(getItemStat(itemStat.description)));
        break;
        
    case store_st.buy_buying:
        //draw the item info box
        draw_set_font(fnt_ArialBlack16);
        draw_set_color(c_menuGrayW2);
        draw_rectangle(
            12,
            display_get_gui_height()*0.68,  
            display_get_gui_width()-12, 
            display_get_gui_height()*0.92,
            false
        );
        
        //draw the question text
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(c_menuBlack);
        draw_text(
            24, 
            display_get_gui_height()*0.7, 
            "How many "+ string(getItemStat(itemStat.name)) +" do you want?"
        );
        
        
        //draw the amount box
        draw_set_color(c_menuGrayW2);
        draw_rectangle(
            display_get_gui_width()*0.55,
            display_get_gui_height()*0.45,  
            display_get_gui_width(), 
            display_get_gui_height()*0.45+((string_height("I"))*3),
            false
        );
        
        draw_set_color(c_menuBlack);
        draw_set_halign(fa_center);
        draw_text(display_get_gui_width()*.65,display_get_gui_height()*.5, "x " + string(buyTotal));
        
        draw_set_halign(fa_right);
        draw_text(display_get_gui_width()*.97,display_get_gui_height()*.47, "Cost:#$" + string(buyTotal * getItemStat(itemStat.price)));
        break;
        
    case store_st.buy_sure:
        //draw the item info box
        draw_set_font(fnt_ArialBlack16);
        draw_set_color(c_menuGrayW2);
        draw_rectangle(
            12,
            display_get_gui_height()*0.68,  
            display_get_gui_width()-12, 
            display_get_gui_height()*0.92,
            false
        );
        
        //draw the question text
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(c_menuBlack);
        draw_text(
            24, 
            display_get_gui_height()*0.7, 
            "Are you sure you want to buy "+ string(buyTotal) +"#"+ string(getItemStat(itemStat.name)) +", for $"+ string(buyTotal * getItemStat(itemStat.price)) +"?"
        );
        
        
        //draw the amount box
        draw_set_color(c_menuGrayW2);
        draw_rectangle(
            display_get_gui_width()*0.55,
            display_get_gui_height()*0.45,  
            display_get_gui_width(), 
            display_get_gui_height()*0.45+((string_height("I"))*3),
            false
        );
        
        draw_set_color(c_menuBlack);
        draw_set_halign(fa_center);
        draw_text(display_get_gui_width()*.65,display_get_gui_height()*.5, "x " + string(buyTotal));
        
        draw_set_halign(fa_right);
        draw_text(display_get_gui_width()*.97,display_get_gui_height()*.47, "Cost:#$" + string(buyTotal * getItemStat(itemStat.price)));
        break;
     
    // Selling States  
    case store_st.sell:
        draw_text(display_get_gui_width()/2,display_get_gui_height()/2,"Sell");
        break;
        
    case store_st.sell_selling:
        draw_text(display_get_gui_width()/2,display_get_gui_height()/2,"Selling");
        break;
        
    case store_st.sell_sure:
        draw_text(display_get_gui_width()/2,display_get_gui_height()/2,"Sell sure");
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
