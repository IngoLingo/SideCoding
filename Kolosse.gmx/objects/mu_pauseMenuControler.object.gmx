<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Colors
//These are global vars (set up in the begining)
c_menuBlack = c_black;
c_menuGrayB2 = make_colour_hsv(0, 0, 43);
c_menuGrayB1 = make_colour_hsv(0, 0, 85);
c_menuGray0 = make_colour_hsv(0, 0, 128);
c_menuGrayW1 = make_colour_hsv(0, 0, 170);
c_menuGrayW2 = make_colour_hsv(0, 0, 213);//white?
c_menuWhite = c_white;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables Set up
playerSlot = 1;

buttonDelay = 1;
delayNum = room_speed/6;
canDoPause = true;
isDoingPause = false;

keyHoldTime = 0;
keyHoldLoop = 0;

numberInParty = 0;

//State machine for menu (idicateing what menu the player is currently in)
    enum pause_st {
        none,
        main,
            index,
                mapIndex,
                kolosseIndex, 
                    kolosseIndexInfo, kolosseIndexStats, kolosseIndexMoves, kolosseIndexOther,
                movesIndexAll, movesIndexAttack, movesIndexStatus,
                itemsIndexItems, itemsIndexMeds, itemsIndexCapts, itemsIndexKeys,
            party,
                partyOptions_P,
                partyOptions_K,
                    trainerPartyStats, trainerPartyRecords, trainerPartyOther, //trainerPartyOther could be equipment/outfit chage
                    trainerPartyEquip, trainerPartyRide,
                    kolossePartyInfo, kolossePartySats, kolossePartyMoves, kolossePartyOther1, kolossePartyOther2,
                    kolossePartyEquip, kolossePartySwap, kolossePartyRestore, kolossePartyChangeName,
                        kolossePartyChangeMoves, kolossePartyChangeMovesList,
                partyFormation,
            bag,
                //bagItems, bagMeds, bagCapts, bagKeys,
                    bagOrginize, bagOptions,
                        bagUseOption, bagTrashOption, bagTrashDecideOption, bagSortOption,
            save,
                noSaving,
                yesSaving,
            options //just have options say unavailable for this build
    }
pauseMenuState = pause_st.none;

//Menu Selections
pauseMenu[0] = "Continue";
pauseMenu[1] = "Index";
pauseMenu[2] = "Party";
pauseMenu[3] = "Bag";
pauseMenu[4] = "Save";
pauseMenu[5] = "Options";
pauseM_selection = 0;

    indexMenu[0] = "Map";
    indexMenu[1] = "Kolosse";
    indexMenu[2] = "Moves";
    indexMenu[3] = "Items";
    indexM_selection = 0;
    
        //mapIndexMenu dosn't have selections yet (one for each area)
        
        //kolosseIndexMenu dosn't have selections yet (it will be one for each kolosse)
        
        //movesIndexMenu dosen't have a list yet (it will be for each move)
        
        //itemIndexMenu dosen't have a list yet (it will be for each item)
        
    partyM_selection = 0; //0 = trainer, 1 through 5 = Kolosse
    partyM_kolosseSelection = 1; // this is just for the kolosse in the party menu
    
        partyMenuTrainerOptions[0] = "Check";
        partyMenuTrainerOptions[1] = "Equip";
        partyMenuTrainerOptions[2] = "Mount";
        partyMenuTrainerOptions[3] = "Back";
        
        partyMenuKolosseOptions[0] = "Check";
        partyMenuKolosseOptions[1] = "Equip";
        partyMenuKolosseOptions[2] = "Swap";
        partyMenuKolosseOptions[3] = "Back";
        
        partyMenuFormation[0] = "No Formation";
        partyMenuFormation[1] = "First in Party";
        partyMenuFormation[2] = "Last in Party";
        partyMenuFormation[3] = "Train Formation";
        partyMenuFormation[4] = "Box Formation";
        partyMenuFormation[5] = "T - Formation";
        partyMenuFormation[6] = "Y - Formation";
        partyMFormation_selection = 0;
        partyMFormation_oldSelection = partyMFormation_selection;
            
            partyPlayerTabMenu[0] = "STATS";
            partyPlayerTabMenu[0] = "EQUIP";
            partyPlayerTabMenu[0] = "RECORD";
            partyPTab_Selection = 0;
            
            partyKolosseTabMenu[0] = "INFO";
            partyKolosseTabMenu[0] = "STATS";
            partyKolosseTabMenu[0] = "MOVES";
            partyKolosseTabMenu[0] = "OTHER";
            partyKTab_Selection = 0;
        
            //partyTrainerEquip is not yet figured out
        
            //partyKolosseRestore list will have to be generated each time the kolossePartyRestore is opend
            
            //partyKolosseEquip list will have to be generated each time the kolossePartyEquip is opend
        
            partyKolosseChangeMove[0] = "Neutral Move";
            partyKolosseChangeMove[1] = "Up Move";
            partyKolosseChangeMove[2] = "Side Move";
            partyKolosseChangeMove[3] = "Down Move";
            partyChangeMoves_selection = 0;
            
            //partyKolosseChangeMoveList will have to be generated each time the kolossePartyChangeMoveList is opend?
            
    bagItemsList = 0;
    bagMedsList = 0;
    bagCaptsList = 0;
    bagKeysList = 0;
    bagList_Selection = bagItemsList;
    
    iteItemScroll = 0;
    medItemScroll = 0;
    capItemScroll = 0;
    keyItemScroll = 0;
    
    scrollNum = 0;
    
        bagTabMenu[0] = "ITEMS";
        bagTabMenu[1] = "MEDICINE";
        bagTabMenu[2] = "CAPTURE";
        bagTabMenu[3] = "KEYS";
        bagTab_Selection = 0;
        
        bagOptions[0] = "Use";
        bagOptions[1] = "Trash";
        bagOptions[2] = "Sort";
        bagOptions[3] = "Back";
        
        bagOrginizeOptions[0] = "Type";
        bagOrginizeOptions[1] = "Amount";
        bagOrginizeOptions[2] = "ABC";
        bagOrginizeOptions[3] = "Back";
        
        options_selection = 0;

    noYesCheck[0] = "No";
    noYesCheck[1] = "Yes";
    
    checks_selection = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Controles
scr_getControler1_Inputs();

var pressPauseButton;
pressPauseButton = max(key_press_start, key_press_Y, 0);

var pressSelectButton;
pressSelectButton = max(key_press_select, key_press_X, 0);

var moveV_Axis = 0;
moveV_Axis = (key_press_down - key_press_up);

var moveH_Axis = 0;
moveH_Axis = (key_press_right - key_press_left);

/* //key_press_A
var pressConfirm;
pressConfirm = max(key_press_A,0);

//key_press_B
var pressBack;
pressBack = max (key_press_B, 0);
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///buttonDelay--
if buttonDelay &gt; 0 {buttonDelay--;} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get and Update Party Variables
for(var i = 0; i &lt;= 4; i++){ 
    if global.playerParty[# 0, i] != 0 {
        numberInParty = i+1;
    } else {break;}
}
//numberInParty = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls for none, main, the options inside of main
//Pause menu switch state
switch (pauseMenuState) 
{
    case pause_st.none:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing Pause Button
        if (pressPauseButton == 1) {          
            pauseMenuState = pause_st.main;
            buttonDelay = delayNum;
        }
        break;
        
    case pause_st.main:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        pauseM_selection += moveV_Axis;
        pauseM_selection = wrap(pauseM_selection, 0, array_length_1d(pauseMenu) - 1);
                
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            scr_pressA_mainPauseMenu();
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.none;
            buttonDelay = delayNum;
        }
        
        //Pressing Pause Button
        if (pressPauseButton == 1) {          
            pauseMenuState = pause_st.none;
            buttonDelay = delayNum;
        }
        break;

    //==These are menus above the main pause menu==//
    case pause_st.index:  
        if buttonDelay &gt; 0 {break;}
              
        //Pressing on the directional controles
        indexM_selection += moveH_Axis;
        indexM_selection += moveV_Axis*2;
        indexM_selection = wrap(indexM_selection, 0, array_length_1d(indexMenu) - 1);
         
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            //scr_pressA_indexMenu();
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.main;
            buttonDelay = delayNum;
        }
        break;
        
    case pause_st.options:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.main;
            buttonDelay = delayNum;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controles for Party Menus
switch (pauseMenuState) 
{
    case pause_st.party:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        partyM_selection += moveV_Axis;
        if moveH_Axis != 0 {
            if partyM_selection == 0 {partyM_selection = partyM_kolosseSelection;}
            else {partyM_selection = 0;}
        }
        partyM_selection = wrap(partyM_selection, 0, numberInParty);
        
        if partyM_selection &gt; 0 {
            partyM_kolosseSelection = partyM_selection;
        }
        
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            if partyM_selection = 0 {pauseMenuState = pause_st.partyOptions_P;}     
            if partyM_selection &gt; 0 {pauseMenuState = pause_st.partyOptions_K;}
            options_selection = 0;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.main;
            buttonDelay = delayNum;
        }
        
        //Pressing Select Button
        if (key_press_select == 1) {          
            if partyM_selection = 0 {pauseMenuState = pause_st.partyFormation;}     
            if partyM_selection &gt; 0 {pauseMenuState = pause_st.party;}
            buttonDelay = delayNum;
        }
        break;
        
    case pause_st.partyOptions_P:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        options_selection += moveH_Axis;
        options_selection += moveV_Axis*2;
        options_selection = wrap(options_selection, 0, array_length_1d(partyMenuTrainerOptions) - 1);
          
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            pauseMenuState = pause_st.trainerPartyStats;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        
        //Pressing Select Button
        if (key_press_select == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        break;
        
    case pause_st.partyOptions_K:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        options_selection += moveH_Axis;
        options_selection += moveV_Axis*2;
        options_selection = wrap(options_selection, 0, array_length_1d(partyMenuKolosseOptions) - 1);
          
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            pauseMenuState = pause_st.kolossePartyInfo;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        
        //Pressing Select Button
        if (key_press_select == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        break;
    
    case pause_st.partyFormation:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        partyMFormation_selection += moveV_Axis;
        partyMFormation_selection = wrap(partyMFormation_selection, 0, array_length_1d(partyMenuFormation) - 1);
        
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
            partyMFormation_oldSelection = partyMFormation_selection;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
            partyMFormation_selection = partyMFormation_oldSelection;
        }
        
        //Pressing Select Button
        if (key_press_select == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
            partyMFormation_oldSelection = partyMFormation_selection;
        }
        break;
    
    case pause_st.trainerPartyStats:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        
        //Pressing Select Button
        if (key_press_select == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        break;
    
    case pause_st.kolossePartyInfo:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        partyM_selection += moveV_Axis;
        partyM_selection = wrap(partyM_selection, 1, numberInParty);
        
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        
        //Pressing Select Button
        if (key_press_select == 1) {          
            pauseMenuState = pause_st.party;
            buttonDelay = delayNum;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controles for the Bag Menus
switch (pauseMenuState) {
    case pause_st.bag:
        if buttonDelay &gt; 0 {break;}
        
        //Holding the up or down button
        if (key_hold_down || key_hold_up) {
            if keyHoldTime &lt; room_speed/2 {
                keyHoldTime++;
            } else {
                if keyHoldLoop &lt; room_speed/16 {
                    keyHoldLoop++;
                } else {
                    moveV_Axis = (key_hold_down - key_hold_up);
                    keyHoldLoop = 0;
                }
            }
        } else { keyHoldTime = 0; keyHoldLoop = 0;}
        
        //Pressing on the directional controles
        //  Left/Right
        bagTab_Selection += moveH_Axis;
        bagTab_Selection = wrap(bagTab_Selection,0,array_length_1d(bagTabMenu)-1);
        
        //Switch based on what bag tab is selected
        switch (bagTab_Selection) {
            case 0:
                //Up/Down
                bagItemsList += moveV_Axis;
                bagItemsList = wrap(bagItemsList, 0, ds_grid_height(global.itemInventory));
                bagList_Selection = bagItemsList;
                
                //Scroll items
                if (bagList_Selection-iteItemScroll) &gt; 7 {iteItemScroll++;}
                if (bagList_Selection-iteItemScroll) &lt; 0 {iteItemScroll--;}
                
                scrollNum = iteItemScroll;
                break;
            case 1:
                bagMedsList += moveV_Axis;
                bagMedsList = wrap(bagMedsList, 0, ds_grid_height(global.medicineInventory));
                bagList_Selection = bagMedsList;
                
                //Scroll items
                if (bagList_Selection-medItemScroll) &gt; 7 {medItemScroll++;}
                if (bagList_Selection-medItemScroll) &lt; 0 {medItemScroll--;}
                
                scrollNum = medItemScroll;
                break;
            case 2:
                bagCaptsList += moveV_Axis;
                bagCaptsList = wrap(bagCaptsList, 0, ds_grid_height(global.captureInventory));
                bagList_Selection = bagCaptsList;
                
                //Scroll items
                if (bagList_Selection-capItemScroll) &gt; 7 {capItemScroll++;}
                if (bagList_Selection-capItemScroll) &lt; 0 {capItemScroll--;}
                
                scrollNum = capItemScroll;
                break;
            case 3:
                bagKeysList += moveV_Axis;
                bagKeysList = wrap(bagKeysList, 0, ds_grid_height(global.keyInventory));
                bagList_Selection = bagKeysList;
                
                //Scroll items
                if (bagList_Selection-keyItemScroll) &gt; 7 {keyItemScroll++;}
                if (bagList_Selection-keyItemScroll) &lt; 0 {keyItemScroll--;}
                
                scrollNum = keyItemScroll;
                break;
        }
        
        
        //Pressing Confirm Button
        if (key_press_A == 1) {
            if (bagItemsList &gt;= (ds_grid_height(global.itemInventory)) &amp;&amp; bagTab_Selection == 0) || 
               (bagMedsList &gt;= (ds_grid_height(global.medicineInventory)) &amp;&amp; bagTab_Selection == 1) || 
               (bagCaptsList &gt;= (ds_grid_height(global.captureInventory)) &amp;&amp; bagTab_Selection == 2) || 
               (bagKeysList &gt;= (ds_grid_height(global.keyInventory)) &amp;&amp; bagTab_Selection == 3){
                pauseMenuState = pause_st.main;
            } else {
                options_selection = 0;
                pauseMenuState = pause_st.bagOptions;
            }
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.main;
            buttonDelay = delayNum;
        }
        break;
        
    case pause_st.bagOptions:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        options_selection += moveH_Axis;
        options_selection += moveV_Axis*2;
        options_selection = wrap(options_selection, 0, array_length_1d(bagOptions) - 1);
          
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            //scr_pressA_mainBagMenu();
            pauseMenuState = pause_st.bag;
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.bag;
            buttonDelay = delayNum;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controles for Save Menus
switch (pauseMenuState) 
{
    case pause_st.save:
        if buttonDelay &gt; 0 {break;}
        
        //Pressing on the directional controles
        checks_selection += moveV_Axis;
        checks_selection = wrap(checks_selection, 0, array_length_1d(noYesCheck) - 1);
    
        //Pressing Confirm Button
        if (key_press_A == 1) {          
            if checks_selection == 1 {pauseMenuState = pause_st.yesSaving;}
            else {pauseMenuState = pause_st.noSaving;}
            buttonDelay = delayNum;
        }
        
        //Pressing Back Button
        if (key_press_B == 1) {          
            pauseMenuState = pause_st.main;
            buttonDelay = delayNum;
        }
        break;
        
    case pause_st.noSaving:
        //Pressing Back Button
        if (key_press_A == 1) {          
            pauseMenuState = pause_st.main;
            buttonDelay = delayNum;
        }
        break;
        
    case pause_st.yesSaving:
        //Pressing Back Button
        if (key_press_A == 1) {          
            pauseMenuState = pause_st.main;
            buttonDelay = delayNum;
        }
        break;
        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tell the project manager that the game is paused or not
if (pauseMenuState != pause_st.none &amp;&amp; _projectManager.pm_paused == false) { _projectManager.pm_paused = true; }
else if (pauseMenuState == pause_st.none &amp;&amp; _projectManager.pm_paused == true) { _projectManager.pm_paused = false; }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI for the None and Main Menus
//Draw the white background for the menus
if pauseMenuState &gt;= pause_st.main{
    if pauseMenuState == pause_st.main {draw_set_alpha(.5)} else {draw_set_alpha(1)}
    //DrawBackground
    draw_set_colour(c_menuWhite);
    draw_rectangle(0,0,display_get_gui_width(),display_get_gui_height(),false);
}

switch (pauseMenuState) 
{
    case pause_st.none:
        break;
        
    case pause_st.main:
        draw_set_alpha(1)
        scr_drawPauseBorderAndControles("D-Pad", "Move Selection", true, "Confirm", true, "Back", "PAUSED");
        
        draw_set_font(fnt_ArialBlack16);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        draw_sprite(
            spr_select128x32, 
            0, 
            display_get_gui_width()/2, 
            display_get_gui_height()/2+(pauseM_selection*string_height(pauseMenu[0]))-((array_length_1d(pauseMenu)-1)*string_height(pauseMenu[0])/2)
        );
        
        draw_set_colour(c_menuBlack);
        var m;
        for (m = 0; m &lt; array_length_1d(pauseMenu); m += 1) {
            draw_text(
                display_get_gui_width()/2, 
                display_get_gui_height()/2+(m*string_height(pauseMenu[0]))-((array_length_1d(pauseMenu)-1)*string_height(pauseMenu[0])/2), 
                string(pauseMenu[m])
            );
        }
        break;
        
    //==These are menus above the main pause menu==//
    case pause_st.index:
        scr_drawPauseBorderAndControles("", "", true, "Confirm", true, "Back", "INDEX");
        
        draw_set_font(fnt_ArialBlack16);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        
        draw_sprite(
            spr_select160x80, 
            0, 
            display_get_gui_width()/2 - ((string_height(indexMenu[0])*6))/2 + ((indexM_selection%2)*(string_height(indexMenu[0])*6)), 
            display_get_gui_height()/2  - ((string_height(indexMenu[0])*3))/2 + ((indexM_selection div 2)*(string_height(indexMenu[0])*3)), 
        );
        
        
        var m;
        for (m = 0; m &lt; array_length_1d(indexMenu); m += 1) 
        {
            draw_sprite(
                spr_select140x60, 
                0, 
                display_get_gui_width()/2 - ((string_height(indexMenu[0])*6))/2 + ((m%2)*(string_height(indexMenu[0])*6)), 
                display_get_gui_height()/2  - ((string_height(indexMenu[0])*3))/2 + ((m div 2)*(string_height(indexMenu[0])*3)), 
            );
                
            scr_draw_text_shadow(
                c_menuWhite, 
                c_menuBlack, 
                display_get_gui_width()/2 - ((string_height(indexMenu[0])*6))/2 + ((m%2)*(string_height(indexMenu[0])*6)), 
                display_get_gui_height()/2  - ((string_height(indexMenu[0])*3))/2 + ((m div 2)*(string_height(indexMenu[0])*3)), 
                string(indexMenu[m])
            );
        }            
        break;
        
    case pause_st.options:
        scr_drawPauseBorderAndControles("", "", true, "Confirm", true, "Back", "OPTIONS");
        
        draw_set_font(fnt_ArialBlack16);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        scr_draw_text_shadow(
            c_white, 
            c_black, 
            display_get_gui_width()/2, 
            display_get_gui_height()/2, 
            string("Options are unavailable at this time.")
        );
        break;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI for the Party Menus
if (pauseMenuState &lt;= pause_st.partyOptions_K &amp;&amp; pauseMenuState &gt;= pause_st.party) {
    //draw player box selection
    if (partyM_selection = 0) {
        draw_set_colour(c_menuGray0);
        draw_set_font(fnt_ArialBlack12);
        draw_rectangle(20-12, display_get_gui_height()*0.2-12, display_get_gui_width()*0.45+12, display_get_gui_height()*0.8+12, false);
    }
    
    //draw player box
    draw_set_colour(c_menuGrayW2);
    draw_set_font(fnt_ArialBlack12);
    draw_rectangle(20, display_get_gui_height()*0.2, display_get_gui_width()*0.45, display_get_gui_height()*0.8, false);
    
    //draw test text for player box
    draw_set_colour(c_menuBlack);
    draw_set_font(fnt_ArialBlack12);
    draw_set_halign(fa_middle);
    draw_set_valign(fa_bottom);
    draw_text(display_get_gui_width()*0.24, display_get_gui_height()*0.8,"Money  $"+string(num_separator(_projectManager.pm_monny,",",3))+"#Playtime  0000:00");
    
    draw_set_font(fnt_ArialBlack16);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(24, display_get_gui_height()*0.2,"Player Name#Lv 000");
    
    //draw test images for player box
    draw_sprite_ext(spr_player, 3, display_get_gui_width()*0.24, display_get_gui_height()*0.5,2,2,0,c_white,1);
    
    draw_sprite(spr_tournyBadgeSlot, 0, 20+sprite_get_width(spr_tournyBadgeSlot)/2, display_get_gui_height()*0.6);
    draw_sprite(spr_dojoBadgeSlot, 0, display_get_gui_width()*0.45-sprite_get_width(spr_dojoBadgeSlot)/2, display_get_gui_height()*0.6);
    
    
    var m;
    for (m = 0; m &lt; 5; m += 1) {
    //draw kolosse selection boxes
    draw_set_colour(c_menuGray0);
    if (partyM_selection = m+1) {
        draw_rectangle(
            display_get_gui_width()*0.55 - 16, 
            display_get_gui_height()*0.11 - 8 + (display_get_gui_height()*0.17*m), 
            display_get_gui_width()*0.97 + 8, 
            display_get_gui_height()*0.11 + 56 + (display_get_gui_height()*0.17*m),
            false
            );
    }
    //draw kolosse boxes
    draw_set_colour(c_menuGrayW2);
    draw_rectangle(
        display_get_gui_width()*0.55, 
        display_get_gui_height()*0.11 - 0 + (display_get_gui_height()*0.17*m), 
        display_get_gui_width()*0.97, 
        display_get_gui_height()*0.11 + 48 + (display_get_gui_height()*0.17*m),
        false
        );
        
    //draw kolosse circal thing
    if (partyM_selection = m+1) {
        draw_sprite(
            spr_kolossePartyMenuCircle,
            0,
            display_get_gui_width()*0.55-20, 
            display_get_gui_height()*0.11 + 18 + (display_get_gui_height()*0.17*m) 
            );
        } else {
        draw_sprite_ext(
            spr_kolossePartyMenuCircle,
            0,
            display_get_gui_width()*0.55-12, 
            display_get_gui_height()*0.11 + 20 + (display_get_gui_height()*0.17*m),
            0.9,
            0.9,
            0,c_white,1 
            );
        }
        
    //break early if slot is empty so to not draw empty values
    if global.playerParty[# 0, m] == 0   {continue;} 
    
    //variables to reffrence for kolosse
    scr_getStatsReffrenceVariables(m);
        
    //draw test text
    draw_set_color(c_menuBlack);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(fnt_ArialBlack12);
    draw_text(
        display_get_gui_width()*0.55+26, 
        display_get_gui_height()*0.11 + (display_get_gui_height()*0.17*m), 
        string(name)
        );
    draw_text(
        display_get_gui_width()*0.61, 
        display_get_gui_height()*0.11 + string_height("O") + (display_get_gui_height()*0.17*m), 
        "HP " + string(currentHP) + "/" + string(totalHP)
        );
    draw_text(
        display_get_gui_width()*0.80, 
        display_get_gui_height()*0.11 + string_height("O") + (display_get_gui_height()*0.17*m), 
        "EP " + string(currentEP) + "/" + string(totalEP)
        );
    draw_set_halign(fa_right);
    draw_text(
        display_get_gui_width()*0.96, 
        display_get_gui_height()*0.11 + (display_get_gui_height()*0.17*m), 
        "Lv."+string(level)
        );
        
    //draw kolosse sprite
    script_execute (global.kolosseIndex[# 11, iid]);
    if (partyM_selection = m+1) {
        draw_sprite(
            overWorld,
            -1,
            display_get_gui_width()*0.55-20, 
            display_get_gui_height()*0.18 + (display_get_gui_height()*0.17*m) 
            );
            if status != "OKAY" {
                //draw graphics in the top right of the kolosse sprite's box, to show what status kolosse is in eg. poison bubbles, volt, Zzz, ect.
            }
        } else {
        draw_sprite(
            overWorld,
            3,
            display_get_gui_width()*0.55-12, 
            display_get_gui_height()*0.19 + (display_get_gui_height()*0.17*m) 
            );
            if status != "OKAY" {
                //draw graphics in the top right of the kolosse sprite's box, to show what status kolosse is in eg. poison bubbles, volt, Zzz, ect.
            }
        }
    } 
}

switch (pauseMenuState) 
{
    case pause_st.party:
        //Draw the border
        if partyM_selection = 0 {scr_drawPauseBorderAndControles("Select", "Formation", true, "Confirm", true, "Back", "PARTY");}
        if partyM_selection &gt; 0 {scr_drawPauseBorderAndControles("Select", "Restore", true, "Confirm", true, "Back", "PARTY");}
        break;   
        
    case pause_st.partyOptions_P:
        //draw the party options box
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fnt_ArialBlack16);
        draw_nineSliceRectangle(spr_nSlice,
            display_get_gui_width()*0.55,
            display_get_gui_height()*0.45-((string_height("I"))),  
            display_get_gui_width(), 
            display_get_gui_height()*0.45+((string_height("I"))*3)+20
        );
        
        draw_set_color(c_menuBlack);
        var m;
        for (m = 0; m &lt; array_length_1d(partyMenuTrainerOptions); m += 1) 
        {                
            draw_text(
                display_get_gui_width()*0.64 + ((m%2)*(string_height(partyMenuTrainerOptions[0])*4)), 
                display_get_gui_height()*0.45+10 + ((m div 2)*(string_height(partyMenuTrainerOptions[0]))), 
                string(partyMenuTrainerOptions[m])
            );
        } 
        
        draw_sprite(spr_optionsSelectionArrow, 0, 
            display_get_gui_width()*0.64 - (sprite_get_width(spr_optionsSelectionArrow)*0.6) + ((options_selection%2)*(string_height(partyMenuTrainerOptions[0])*4)), 
            display_get_gui_height()*0.45+10 + (sprite_get_height(spr_optionsSelectionArrow)*0.5) + ((options_selection div 2)*(string_height(partyMenuTrainerOptions[0]))), 
        );
        
        //Draw the border
        scr_drawPauseBorderAndControles("", "", true, "Confirm", true, "Back", "PARTY");
        break;    
        
    case pause_st.partyOptions_K:
        //draw the kolosse options box
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fnt_ArialBlack16);
        draw_nineSliceRectangle(spr_nSlice,
            0,
            display_get_gui_height()*0.45-((string_height("I"))),  
            display_get_gui_width()*0.46, 
            display_get_gui_height()*0.45+((string_height("I"))*3)+20
        );
        
        draw_set_color(c_menuBlack);
        var m;
        for (m = 0; m &lt; array_length_1d(partyMenuKolosseOptions); m += 1) 
        {                
            draw_text(
                display_get_gui_width()*0.09 + ((m%2)*(string_height(partyMenuKolosseOptions[0])*4)), 
                display_get_gui_height()*0.45+10 + ((m div 2)*(string_height(partyMenuKolosseOptions[0]))), 
                string(partyMenuKolosseOptions[m])
            );
        } 
        
        draw_sprite(spr_optionsSelectionArrow, 0, 
            display_get_gui_width()*0.09 - (sprite_get_width(spr_optionsSelectionArrow)*0.6) + ((options_selection%2)*(string_height(partyMenuKolosseOptions[0])*4)), 
            display_get_gui_height()*0.45+10 + (sprite_get_height(spr_optionsSelectionArrow)*0.5) + ((options_selection div 2)*(string_height(partyMenuKolosseOptions[0]))), 
        );
        
        //Draw the border
        scr_drawPauseBorderAndControles("", "", true, "Confirm", true, "Back", "PARTY");
        break;    
        
    case pause_st.partyFormation:
        //draw box
        draw_set_colour(c_menuGrayW2);
        draw_rectangle(20, display_get_gui_height()*0.2, display_get_gui_width()*0.5, display_get_gui_height()*0.8, false);
        
        //draw selection and options
        draw_set_colour(c_menuBlack);
        draw_set_font(fnt_ArialBlack16);
        draw_set_halign(fa_right);
        draw_set_valign(fa_top);
        
        draw_sprite(
            spr_selectBagMenu_Item, 
            0, 
            display_get_gui_width()*0.9-(sprite_get_width(spr_selectBagMenu_Item)*0.3),
            display_get_gui_height()*0.2+(partyMFormation_selection*string_height(partyMenuFormation[0]))+4
        );
        
        var m;
        for (m = 0; m &lt; array_length_1d(partyMenuFormation); m += 1) {
            draw_text(
                display_get_gui_width()*0.9,
                display_get_gui_height()*0.2+(m*string_height(partyMenuFormation[0])), 
                string(partyMenuFormation[m])
            );
        }
        
        //Draw the border
        scr_drawPauseBorderAndControles("", "", true, "Confirm", true, "Back", "PARTY");
        break;        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///_Draw GUI for Party (Player Menus)
if (pauseMenuState &gt;= pause_st.trainerPartyStats &amp;&amp; pauseMenuState &lt;= pause_st.trainerPartyOther) {
    //case pause_st.kolossePartyInfo:
        //draw box
        draw_set_colour(c_menuGrayW2);
        draw_rectangle(20, display_get_gui_height()*0.2, display_get_gui_width()*0.5, display_get_gui_height()*0.8, false);
        
        //draw selection and options
        draw_set_colour(c_menuBlack);
        draw_set_font(fnt_ArialBlack16);
        draw_set_halign(fa_right);
        draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///_Draw GUI for Party (Kolosse Menus)
if (pauseMenuState &gt;= pause_st.kolossePartyInfo &amp;&amp; pauseMenuState &lt;= pause_st.kolossePartyOther2) {
    //case pause_st.kolossePartyInfo:
        //draw box
        draw_set_colour(c_menuGrayW2);
        draw_rectangle(20, display_get_gui_height()*0.2, display_get_gui_width()*0.5, display_get_gui_height()*0.8, false);
        
        //draw selection and options
        draw_set_colour(c_menuBlack);
        draw_set_font(fnt_ArialBlack16);
        draw_set_halign(fa_right);
        draw_set_valign(fa_top);
}

switch (pauseMenuState) {
    case pause_st.kolossePartyInfo:
        scr_getStatsReffrenceVariables(partyM_selection-1);
          
    //draw test text
    draw_set_color(c_menuBlack);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(fnt_ArialBlack12);
    draw_text(
        display_get_gui_width()*0.1+26, 
        display_get_gui_height()*0.11 + (display_get_gui_height()*0.17), 
        string(name)
        );
    draw_text(
        display_get_gui_width()*0.16, 
        display_get_gui_height()*0.11 + string_height("O") + (display_get_gui_height()*0.17), 
        "HP " + string(currentHP) + "/" + string(totalHP)
        );
    draw_text(
        display_get_gui_width()*0.4, 
        display_get_gui_height()*0.11 + string_height("O") + (display_get_gui_height()*0.17), 
        "EP " + string(currentEP) + "/" + string(totalEP)
        );
    draw_set_halign(fa_right);
    draw_text(
        display_get_gui_width()*0.51, 
        display_get_gui_height()*0.11 + (display_get_gui_height()*0.17), 
        "Lv."+string(level)
        );
        
    //draw kolosse sprite
    script_execute (global.kolosseIndex[# 11, iid]);
        draw_sprite(
            overWorld,
            -1,
            display_get_gui_width()*0.1-20, 
            display_get_gui_height()*0.18 + (display_get_gui_height()*0.17) 
            );
            if status != "OKAY" {
                //draw graphics in the top right of the kolosse sprite's box, to show what status kolosse is in eg. poison bubbles, volt, Zzz, ect.
            }
            
        draw_set_font(fnt_ArialBlack10);
        draw_set_halign(fa_right);
        draw_set_valign(fa_top);
        for(var i = 0; i &lt;= 20; i++) {
            draw_text(
            display_get_gui_width()*0.9, 
            display_get_gui_height()*0.01 + (display_get_gui_height()*0.17)+(string_height("O")*i),
            string(global.playerParty[# i, partyM_selection-1])
            );
        } 
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI for the Bag Menus
if (pauseMenuState &lt;= pause_st.bagSortOption &amp;&amp; pauseMenuState &gt;= pause_st.bag) {
        //draw items and the selection
        scr_draw_InvintoryListAndSelection(bagTab_Selection);
             
        //draw selection for the item tabs
        draw_set_font(fnt_ArialBlack20);
        var m;
        for (m = 0; m &lt; 4; m += 1) {
            draw_sprite(
                spr_bagMenuTabs, 
                m, 
                display_get_gui_width()*0.55+(m*(sprite_get_width(spr_bagMenuTabs))), 
                40, 
            );
        }
        
        //draw bag tab
        draw_set_color(c_menuGray0);
        draw_rectangle(
            display_get_gui_width()*0.55+(bagTab_Selection*(sprite_get_width(spr_bagMenuTabs))), 
            40+sprite_get_height(spr_bagMenuTabs), 
            display_get_gui_width()*0.55+(sprite_get_width(spr_bagMenuTabs))+(bagTab_Selection*(sprite_get_width(spr_bagMenuTabs))), 
            60+sprite_get_height(spr_bagMenuTabs),
            false
        );
        
        //draw bag tab box
        draw_set_color(c_menuGrayW1);
        draw_rectangle(
            display_get_gui_width()*0.55, 
            50+sprite_get_height(spr_bagMenuTabs), 
            display_get_gui_width(),//*0.95, 
            50+sprite_get_height(spr_bagMenuTabs)+(string_height("I")),
            false
        );
        
        //draw bag tab menu text
        draw_set_color(c_menuWhite);
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        draw_text(
            display_get_gui_width()*0.75,
            50+sprite_get_height(spr_bagMenuTabs),
            string(bagTabMenu[bagTab_Selection])          
        );
        
        //draw the item name box
        draw_set_font(fnt_ArialBlack16);
        draw_set_color(c_menuGrayW1);
        draw_rectangle(
            0,
            sprite_get_height(spr_bagMenuMask)+56,  
            display_get_gui_width()/2, 
            sprite_get_height(spr_bagMenuMask)+60+(string_height("I")),
            false
        );
        
        //draw item name box text
        draw_set_color(c_menuBlack);
        draw_set_halign(fa_left);
        
        switch (bagTab_Selection) {
            case 0: 
                if bagItemsList &gt;= (ds_grid_height(global.itemInventory)) {
                    draw_text(0, 0, " ");
                } else {
                    draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.itemIndex[# global.itemInventory[# 0, bagItemsList], itemStat.name]));
                }
                break;
            case 1:
                if bagMedsList &gt;= (ds_grid_height(global.medicineInventory)) {
                    draw_text(0, 0, " ");
                } else {
                    draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.medicineIndex[# global.medicineInventory[# 0, bagMedsList], itemStat.name]));
                }
                break;
            case 2:
                if bagCaptsList &gt;= (ds_grid_height(global.captureInventory)) {
                    draw_text(0, 0, " ");
                } else {
                    draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.captureIndex[# global.captureInventory[# 0, bagCaptsList], itemStat.name]));
                }
                break;
            case 3:
                if bagKeysList &gt;= (ds_grid_height(global.keyInventory)) {
                    draw_text(0, 0, " ");
                } else {
                    draw_text(10, sprite_get_height(spr_bagMenuMask)+58, string(global.keyIndex[# global.keyInventory[# 0, bagKeysList], itemStat.name]));
                }
                break;
        }
        
}

switch (pauseMenuState) 
{
    case pause_st.bag:
        //draw the item discription text
        draw_set_color(c_menuBlack);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fnt_ArialBlack12);
        switch (bagTab_Selection) {
            case 0: 
                if bagItemsList &gt;= (ds_grid_height(global.itemInventory)) {
                    draw_text(0, 0, " ");
                } else {
                    draw_text(24, sprite_get_height(spr_bagMenuMask)+100, string(global.itemIndex[# global.itemInventory[# 0, bagItemsList], itemStat.description]));
                }
                break;
            case 1:
                if bagMedsList &gt;= (ds_grid_height(global.medicineInventory)) {
                    draw_text(0, 0, " ");
                } else {
                    draw_text(24, sprite_get_height(spr_bagMenuMask)+100, string(global.medicineIndex[# global.medicineInventory[# 0, bagMedsList], itemStat.description]));
                }
                break;
            case 2:
                if bagCaptsList &gt;= (ds_grid_height(global.captureInventory)) {
                    draw_text(0, 0, " ");
                } else {
                    draw_text(24, sprite_get_height(spr_bagMenuMask)+100, string(global.captureIndex[# global.captureInventory[# 0, bagCaptsList], itemStat.description]));
                }
                break;
            case 3:
                if bagKeysList &gt;= (ds_grid_height(global.keyInventory)) {
                    draw_text(0, 0, " ");
                } else {
                    draw_text(24, sprite_get_height(spr_bagMenuMask)+100, string(global.keyIndex[# global.keyInventory[# 0, bagKeysList], itemStat.description]));
                }
                break;
        }
        
        //Draw Border
        scr_drawPauseBorderAndControles("Select", "Orginize", true, "Confirm", true, "Back", "BAG");
        break;
 
    case pause_st.bagOrginize:
        break;

    case pause_st.bagOptions:
        //draw the item info box
        draw_set_font(fnt_ArialBlack16);
        draw_set_color(c_menuGrayW2);
        draw_rectangle(
            12,
            display_get_gui_height()*0.62,  
            display_get_gui_width()-12, 
            display_get_gui_height()*0.92,
            false
        );
        
        //draw the question text
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(c_menuBlack);
        draw_text(
            24, 
            display_get_gui_height()*0.65, 
            "What do you want to do with [Item]?"
        );
        
        
        //draw the item options box
        draw_set_color(c_menuGrayW2);
        draw_rectangle(
            display_get_gui_width()*0.55,
            display_get_gui_height()*0.45,  
            display_get_gui_width(), 
            display_get_gui_height()*0.45+((string_height("I"))*2)+20,
            false
        );
        
        draw_set_color(c_menuBlack);
        var m;
        for (m = 0; m &lt; array_length_1d(bagOptions); m += 1) 
        {                
            draw_text(
                display_get_gui_width()*0.64 + ((m%2)*(string_height(bagOptions[0])*4)), 
                display_get_gui_height()*0.45+10 + ((m div 2)*(string_height(bagOptions[0]))), 
                string(bagOptions[m])
            );
        } 
        
        draw_sprite(spr_optionsSelectionArrow, 0, 
            display_get_gui_width()*0.64 - (sprite_get_width(spr_optionsSelectionArrow)*0.6) + ((options_selection%2)*(string_height(bagOptions[0])*4)), 
            display_get_gui_height()*0.45+10 + (sprite_get_height(spr_optionsSelectionArrow)*0.5) + ((options_selection div 2)*(string_height(bagOptions[0]))), 
        );
        
        //Draw Border
        scr_drawPauseBorderAndControles("", "", true, "Confirm", true, "Back", "BAG");
        break;

    case pause_st.bagUseOption:
        break;

    case pause_st.bagTrashOption:
        break;

    case pause_st.bagTrashDecideOption:
        break;

    case pause_st.bagSortOption:
        break;
}

//Draw current money
if (pauseMenuState &lt;= pause_st.bagSortOption &amp;&amp; pauseMenuState &gt;= pause_st.bag) {
    draw_set_color(c_menuGrayB2);
    draw_set_font(fnt_ArialBlack12);
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);
    draw_text(display_get_gui_width(),4,"Your Money  $"+string(num_separator(_projectManager.pm_monny,",",3))+"   ");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI for the Save Menus
switch (pauseMenuState) 
{   
    case pause_st.save:
        //Draw the border
        scr_drawPauseBorderAndControles("", "", true, "Confirm", true, "Back", "");
        
        draw_set_color(c_menuGrayW1);
        draw_nineSliceRectangle(spr_nSlice, 20, 40, display_get_gui_width()/2-20, display_get_gui_height()*0.5);
        draw_nineSliceRectangle(spr_nSlice, display_get_gui_width()/2+20, 40, display_get_gui_width()-20, display_get_gui_height()*0.5);
        
        //Draw save data, old and new
        draw_set_font(fnt_ArialBlack12);     
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            20, 
            45, 
            string("###  Tournaments#  Dojos#  Kolosse#  Map#  Time")
        );
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()/2+20, 
            45, 
            string("###  Tournaments#  Dojos#  Kolosse#  Map#  Time")
        );
        draw_set_halign(fa_right);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()/2-20, 
            45, 
            string("###0  #0  #0  #000%  #000:00  ")
        );
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()-20, 
            45, 
            string("###0  #0  #0  #000%  #000:00  ")
        );
        
        draw_set_halign(fa_center);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()*.25, 
            45, 
            string("Player Name#Current Location")
        );
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()*.75, 
            45, 
            string("Player Name#Current Location")
        );
        
        draw_set_font(fnt_ArialBlack20);
        draw_set_color(c_menuGrayB1); 
        draw_text(
            display_get_gui_width()*.25, 
            display_get_gui_height()*0.5, 
            string("Old Data")
        ); 
        draw_text(
            display_get_gui_width()*.75, 
            display_get_gui_height()*0.5, 
            string("New Data")
        );
        
        //Draw selection box 
        draw_set_font(fnt_ArialBlack16);              
        draw_sprite(
            spr_select128x32, 
            0,  
                display_get_gui_width()*0.8, 
                display_get_gui_height()*0.75 +(string_height("I")*checks_selection) 
        );
        
        draw_set_valign(fa_middle);
        draw_set_color(c_menuBlack);
        //Draw No/Yes
        var m;
        for (m = 0; m &lt; array_length_1d(noYesCheck); m += 1) {
            draw_text( 
                display_get_gui_width()*0.8, 
                display_get_gui_height()*0.75 +(string_height("I")*m), 
                string(noYesCheck[m])
            );
        }
        
        //Draw other text
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        
        draw_text(
            25, 
            display_get_gui_height()*0.75, 
            string("Do you want to save?#This will overwrite your old data.")
        );
        break;
        
    case pause_st.noSaving:
        //Draw the border
        scr_drawPauseBorderAndControles("", "", true, "Continue", false, "", "");
        
        draw_set_colour(c_menuGrayW1);
        draw_rectangle(20, 40, display_get_gui_width()/2-20, display_get_gui_height()*0.5, false);
        
        //Draw save data, old and new
        draw_set_font(fnt_ArialBlack12);     
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            20, 
            45, 
            string("###  Tournaments#  Dojos#  Kolosse#  Map#  Time")
        );
        
        draw_set_halign(fa_right);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()/2-20, 
            45, 
            string("###0  #0  #0  #000%  #000:00  ")
        );
        
        draw_set_halign(fa_center);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()*.25, 
            45, 
            string("Player Name#Current Location")
        );
        
        draw_set_font(fnt_ArialBlack20); 
        draw_set_color(c_menuGrayB1); 
        draw_text(
            display_get_gui_width()*.25, 
            display_get_gui_height()*0.5, 
            string("Old Data")
        );
        
        //Draw other text
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fnt_ArialBlack16);
        draw_set_color(c_menuBlack); 
        draw_text(
            25, 
            display_get_gui_height()*0.75, 
            string("The game was NOT saved.")
        );
        break;
        
    case pause_st.yesSaving:        //Draw the border
        scr_drawPauseBorderAndControles("", "", true, "Continue", false, "", "");
        
        draw_set_colour(c_menuGrayW1);
        draw_rectangle(display_get_gui_width()/2+20, 40, display_get_gui_width()-20, display_get_gui_height()*0.5, false);
        
        //Draw save data, old and new
        draw_set_font(fnt_ArialBlack12);     
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()/2+20, 
            45, 
            string("###  Tournaments#  Dojos#  Kolosse#  Map#  Time")
        );
        
        draw_set_halign(fa_right);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()-20, 
            45, 
            string("###0  #0  #0  #000%  #000:00  ")
        );
        
        draw_set_halign(fa_center);
        scr_draw_text_shadow(
            c_menuWhite, 
            c_menuGrayB2, 
            display_get_gui_width()*.75, 
            45, 
            string("Player Name#Current Location")
        );
        
        draw_set_font(fnt_ArialBlack20); 
        draw_set_color(c_menuGrayB1); 
        draw_text(
            display_get_gui_width()*.75, 
            display_get_gui_height()*0.5, 
            string("New Data")
        );
        
        //Draw other text
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fnt_ArialBlack16);
        draw_set_color(c_menuBlack); 
        draw_text(
            25, 
            display_get_gui_height()*0.75, 
            string("The game can not be saved, yet.")
        );
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Draw Current State Number
draw_set_color(c_red);
draw_text(display_get_gui_width()-32, 8, string(pauseMenuState));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
